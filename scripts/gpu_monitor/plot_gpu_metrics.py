#!/usr/bin/env python3
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import numpy as np
import os

def parse_timestamp(timestamp):
    """Parse timestamp from format YYYYMMDD-HH:MM:SS.mmmmmm"""
    try:
        return datetime.strptime(timestamp, '%Y%m%d-%H:%M:%S.%f')
    except ValueError:
        # Try format without microseconds
        return datetime.strptime(timestamp, '%Y%m%d-%H:%M:%S')

def read_gpu_metrics(csv_file):
    """Read CSV file and convert data types"""
    # Read CSV file, skip comment lines starting with #
    with open(csv_file, 'r') as f:
        comments = []
        for line in f:
            if line.startswith('#'):
                comments.append(line.strip('# \n'))
            else:
                break

    # Read data section
    df = pd.read_csv(csv_file, comment='#')

    # Convert timestamp to datetime objects
    df['timestamp'] = df['timestamp'].apply(parse_timestamp)

    # Convert non-numeric values (like "N/A") to NaN
    for col in df.columns:
        if col != 'timestamp':
            df[col] = pd.to_numeric(df[col], errors='coerce')

    return df, comments

def plot_gpu_metrics(df, output_file=None, show=False, title_prefix=""):
    """Plot GPU metrics chart"""
    # Extract relative time (seconds from the first data point)
    start_time = df['timestamp'].iloc[0]
    df['relative_time'] = [(t - start_time).total_seconds() for t in df['timestamp']]

    # Create chart
    fig, axes = plt.subplots(4, 1, figsize=(12, 16), sharex=True)
    fig.suptitle(f"{title_prefix}GPU Monitoring Metrics", fontsize=16)

    # Plot frequency chart
    axes[0].set_title('GPU Frequency')
    axes[0].plot(df['relative_time'], df['sm_clock (MHz)'], label='SM Clock')
    axes[0].plot(df['relative_time'], df['mem_clock (MHz)'], label='Memory Clock')
    axes[0].plot(df['relative_time'], df['graphics_clock (MHz)'], label='Graphics Clock')
    axes[0].set_ylabel('Frequency (MHz)')
    axes[0].legend()
    axes[0].grid(True)

    # Plot temperature chart
    axes[1].set_title('GPU Temperature')
    axes[1].plot(df['relative_time'], df['temperature (°C)'], 'r-', label='Temperature')
    axes[1].set_ylabel('Temperature (°C)')
    axes[1].legend()
    axes[1].grid(True)

    # Plot power chart
    axes[2].set_title('GPU Power')
    axes[2].plot(df['relative_time'], df['power_draw (W)'], 'g-', label='Average Power')
    if not df['instantaneous_power (W)'].isna().all():
        axes[2].plot(df['relative_time'], df['instantaneous_power (W)'], 'g--', label='Instantaneous Power')
    axes[2].set_ylabel('Power (W)')
    axes[2].legend()
    axes[2].grid(True)

    # Plot utilization chart
    axes[3].set_title('GPU Utilization')
    axes[3].plot(df['relative_time'], df['gpu_utilization (%)'], label='GPU Utilization')
    axes[3].plot(df['relative_time'], df['memory_utilization (%)'], label='Memory Utilization')
    axes[3].set_ylabel('Utilization (%)')
    axes[3].set_xlabel('Time (seconds)')
    axes[3].legend()
    axes[3].grid(True)

    # Beautify X axis
    for ax in axes:
        ax.set_xlim(0, max(df['relative_time']))

    plt.tight_layout()
    plt.subplots_adjust(top=0.95)

    # Save or display the chart
    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"Chart saved to: {output_file}")

    if show:
        plt.show()

    plt.close()

def main():
    parser = argparse.ArgumentParser(description='Visualize GPU monitoring data')
    parser.add_argument('csv_file', help='CSV data file generated by gpu_monitor.py')
    parser.add_argument('-o', '--output', help='Output image file path')
    parser.add_argument('-s', '--show', action='store_true', help='Display the chart')
    parser.add_argument('-t', '--title', default='', help='Chart title prefix')

    args = parser.parse_args()

    # If no output file and no show option specified, save as image by default
    if not args.output and not args.show:
        base_name = os.path.splitext(os.path.basename(args.csv_file))[0]
        args.output = f"{base_name}.png"

    # Read data
    df, comments = read_gpu_metrics(args.csv_file)

    # Output some statistics
    print(f"Read {len(df)} records")
    print("Statistics:")

    # Calculate and print useful statistics
    for col in df.columns:
        if col != 'timestamp':
            try:
                mean_val = df[col].mean()
                max_val = df[col].max()
                min_val = df[col].min()
                print(f"  {col}:")
                print(f"    Mean: {mean_val:.2f}")
                print(f"    Max: {max_val:.2f}")
                print(f"    Min: {min_val:.2f}")
            except:
                pass

    # Plot chart
    plot_gpu_metrics(df, args.output, args.show, args.title)

    # Display useful comments/metadata
    print("\nMetadata information:")
    for comment in comments:
        print(f"  {comment}")

if __name__ == "__main__":
    main()
